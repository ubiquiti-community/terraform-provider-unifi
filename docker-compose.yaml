---
services:
  db:
    image: mongo:latest
    container_name: db
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=unifi
      - MONGO_INITDB_ROOT_PASSWORD=unifi
      - MONGO_INITDB_DATABASE=unifi
      # - MONGO_USER=unifi
      # - MONGO_PASS=unifi
      # - MONGO_HOST=db
      # - MONGO_PORT=27017
      # - MONGO_DBNAME=unifi
      # - MONGO_AUTHSOURCE=admin
    # configs:
    #   - source: db-init
    #     target: /docker-entrypoint-initdb.d/init-mongo.sh
    #     mode: 0644
    networks: [unifi]
  unifi:
    image: lscr.io/linuxserver/unifi-network-application:latest
    container_name: unifi
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - MONGO_USER=unifi
      - MONGO_PASS=unifi
      - MONGO_HOST=db
      - MONGO_PORT=27017
      - MONGO_DBNAME=unifi
      - MONGO_AUTHSOURCE=admin
    volumes:
      - unifi-data:/config
    ports:
      - 8443:8443
      - 3478:3478/udp
      - 10001:10001/udp
      - 8080:8080
    networks: [unifi]
    restart: unless-stopped
# configs:
  # db-init:
  #   content: |
  #     #!/bin/bash
  #     if which mongosh > /dev/null 2>&1; then
  #       mongo_init_bin='mongosh'
  #     else
  #       mongo_init_bin='mongo'
  #     fi
  #     "${mongo_init_bin}" <<EOF
  #     use ${MONGO_AUTHSOURCE}
  #     db.auth("${MONGO_INITDB_ROOT_USERNAME}", "${MONGO_INITDB_ROOT_PASSWORD}")
  #     db.createUser({
  #       user: "${MONGO_USER}",
  #       pwd: "${MONGO_PASS}",
  #       roles: [
  #         { db: "${MONGO_DBNAME}", role: "dbOwner" },
  #         { db: "${MONGO_DBNAME}_stat", role: "dbOwner" },
  #         { db: "${MONGO_DBNAME}_audit", role: "dbOwner" }
  #       ]
  #     })
  #     EOF
volumes:
  unifi-data:
networks:
  unifi:
    driver: bridge
